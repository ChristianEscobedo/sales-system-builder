"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Wand2, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { generatePrompt } from "@/lib/api/prompt";
import type { PromptData } from "@/types/prompt";
import type { PromptBrief } from "@/types/prompt-brief";

interface AutoGenerateDialogProps {
  onGenerate: (data: PromptData) => void;
}

export function AutoGenerateDialog({ onGenerate }: AutoGenerateDialogProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const { toast } = useToast();
  const [brief, setBrief] = useState<PromptBrief>({
    courseName: "",
    problem: "",
    audience: "",
    description: ""
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!brief.courseName || !brief.problem || !brief.audience) {
      toast({
        title: "Missing Information",
        description: "Please fill in all required fields",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    
    try {
      const data = await generatePrompt(brief);
      onGenerate(data);
      setIsOpen(false);
      toast({
        title: "Success",
        description: "Landing page content generated successfully"
      });
    } catch (error) {
      console.error("Generation error:", error);
      toast({
        title: "Generation Failed",
        description: error instanceof Error ? error.message : "Failed to generate content",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700">
          <Wand2 className="mr-2 h-4 w-4" />
          Auto Generate
        </Button>
      </DialogTrigger>
      <DialogContent className="bg-[#0A0A0A] border-purple-500/20 text-white">
        <DialogHeader>
          <DialogTitle>Auto Generate Landing Page</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div>
            <Label>Course Name *</Label>
            <Input
              required
              placeholder="e.g., AI Marketing Mastery"
              value={brief.courseName}
              onChange={(e) => setBrief(prev => ({ ...prev, courseName: e.target.value }))}
              className="bg-white/10 border-purple-500/30"
            />
          </div>
          <div>
            <Label>Target Audience *</Label>
            <Input
              required
              placeholder="e.g., Small Business Owners"
              value={brief.audience}
              onChange={(e) => setBrief(prev => ({ ...prev, audience: e.target.value }))}
              className="bg-white/10 border-purple-500/30"
            />
          </div>
          <div>
            <Label>Problem to Solve *</Label>
            <Input
              required
              placeholder="e.g., Low Website Conversion Rates"
              value={brief.problem}
              onChange={(e) => setBrief(prev => ({ ...prev, problem: e.target.value }))}
              className="bg-white/10 border-purple-500/30"
            />
          </div>
          <div>
            <Label>Additional Details (Optional)</Label>
            <Textarea
              placeholder="Any additional context or requirements..."
              value={brief.description}
              onChange={(e) => setBrief(prev => ({ ...prev, description: e.target.value }))}
              className="bg-white/10 border-purple-500/30"
            />
          </div>
          <Button 
            type="submit"
            disabled={isLoading}
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              'Generate Landing Page Content'
            )}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}