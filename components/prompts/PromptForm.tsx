"use client";

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { StyleSelector } from "./StyleSelector";
import { ColorPicker } from "./ColorPicker";
import { stylePresets } from "@/lib/constants/style-presets";
import type { PromptStylePreset } from "@/lib/constants/style-presets";
import type { PromptData } from "@/types/prompt";
import { AutoGenerateDialog } from "./AutoGenerateDialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Steps } from "@/components/ui/steps";
import { StepsDialog } from "./StepsDialog";

interface PromptFormProps {
  data: PromptData;
  onSubmit: (data: PromptData) => void;
  onChange?: (data: PromptData) => void;
  isGenerating?: boolean;
  publicVersion?: boolean;
  onSave?: () => void;
}

export function PromptForm({ data, onSubmit, isGenerating, publicVersion = false, onSave }: PromptFormProps) {
  // Ensure data has default values
  const formData = {
    ...data,
    resourceType: data?.resourceType || "",
    resourceName: data?.resourceName || "",
    painPoint: data?.painPoint || "",
    quickWin: data?.quickWin || "",
    frustrationMethod: data?.frustrationMethod || "",
    timeFrame: data?.timeFrame || "",
    modules: data?.modules || [],
    bonusName: data?.bonusName || "",
    bonusValue: data?.bonusValue || 0,
    targetAudience: data?.targetAudience || "",
    expertName: data?.expertName || "",
    expertCredentials: data?.expertCredentials || "",
    transformation: data?.transformation || "",
    industryNiche: data?.industryNiche || "",
    productPrice: data?.productPrice || "",
    supportEmail: data?.supportEmail || "",
  };

  const updateField = (field: keyof PromptData, value: any) => {
    onSubmit({
      ...formData,
      [field]: field === "colorTheme" && typeof value === "object"
        ? { ...formData.colorTheme, ...value }
        : field === "stylePreset" && typeof value === "string"
        ? value
        : value
    });
  };

  const handlePresetChange = (preset: PromptStylePreset) => {
    updateField("stylePreset", preset);
    
    const presetColors = stylePresets[preset].colors;
    updateField("colorTheme", {
      primary: presetColors.primary,
      secondary: presetColors.secondary,
      background: presetColors.background,
      text: presetColors.text,
      hoverText: presetColors.hoverText,
      selectedText: presetColors.selectedText,
      accent: presetColors.accent,
      gradients: stylePresets[preset].colors.gradients
    });
  };

  return (
    <div className="space-y-6">
      <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-semibold text-white">Prompt Build Form</h3>
          <div className="flex items-center gap-2">
            <StepsDialog />
            <AutoGenerateDialog onGenerate={onSubmit} />
          </div>
        </div>
        
        <Tabs defaultValue="basic" className="space-y-6">
          <TabsList className="grid grid-cols-3 w-full">
            <TabsTrigger value="basic">Basic Info</TabsTrigger>
            <TabsTrigger value="content">Content</TabsTrigger>
            <TabsTrigger value="style">Style & Layout</TabsTrigger>
          </TabsList>

          <TabsContent value="basic" className="space-y-4">
            <div>
              <Label className="text-white">Resource Type</Label>
              <Input
                value={formData.resourceType}
                onChange={(e) => updateField("resourceType", e.target.value)}
                placeholder="e.g., Course, Masterclass, Workshop"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Resource Name</Label>
              <Input
                value={formData.resourceName}
                onChange={(e) => updateField("resourceName", e.target.value)}
                placeholder="e.g., AI Marketing Mastery"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Target Audience</Label>
              <Input
                value={formData.targetAudience}
                onChange={(e) => updateField("targetAudience", e.target.value)}
                placeholder="e.g., Digital Marketers, Small Business Owners"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Industry/Niche</Label>
              <Input
                value={formData.industryNiche}
                onChange={(e) => updateField("industryNiche", e.target.value)}
                placeholder="e.g., Digital Marketing, E-commerce"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Product Price</Label>
              <Input
                type="number"
                value={formData.productPrice}
                onChange={(e) => updateField("productPrice", parseFloat(e.target.value))}
                placeholder="e.g., 97"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Support Email</Label>
              <Input
                type="email"
                value={formData.supportEmail}
                onChange={(e) => updateField("supportEmail", e.target.value)}
                placeholder="e.g., support@example.com"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
          </TabsContent>

          <TabsContent value="content" className="space-y-4">
            <div>
              <Label className="text-white">Pain Point</Label>
              <Input
                value={formData.painPoint}
                onChange={(e) => updateField("painPoint", e.target.value)}
                placeholder="e.g., Low Website Conversion Rates"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Quick Win</Label>
              <Input
                value={formData.quickWin}
                onChange={(e) => updateField("quickWin", e.target.value)}
                placeholder="e.g., Double Your Conversion Rate"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Frustration Method</Label>
              <Input
                value={formData.frustrationMethod}
                onChange={(e) => updateField("frustrationMethod", e.target.value)}
                placeholder="e.g., Expensive Paid Ads"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Time Frame</Label>
              <Input
                value={formData.timeFrame}
                onChange={(e) => updateField("timeFrame", e.target.value)}
                placeholder="e.g., 30 days, 60 minutes"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Modules (One per line)</Label>
              <Textarea
                value={(formData.modules || []).join("\n")}
                onChange={(e) => updateField("modules", e.target.value.split("\n").filter(Boolean))}
                placeholder="Module 1: Getting Started&#10;Module 2: Core Strategies&#10;Module 3: Implementation"
                className="bg-white/10 border-purple-500/30 text-white min-h-[120px]"
              />
            </div>
            <div>
              <Label className="text-white">Bonus Name</Label>
              <Input
                value={formData.bonusName}
                onChange={(e) => updateField("bonusName", e.target.value)}
                placeholder="e.g., Quick Start Implementation Guide"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Bonus Value</Label>
              <Input
                type="number"
                value={formData.bonusValue}
                onChange={(e) => updateField("bonusValue", parseInt(e.target.value))}
                placeholder="e.g., 97"
                className="bg-white/10 border-purple-500/30 text-white"
              />
            </div>
          </TabsContent>

          <TabsContent value="style" className="space-y-6">
            <div>
              <Label className="text-white mb-4 block">Style Preset</Label>
              <StyleSelector
                value={(formData.stylePreset as PromptStylePreset) || 'modern'}
                onChange={handlePresetChange}
                onColorUpdate={(colors) => updateField("colorTheme", colors)}
              />
            </div>

            <div className="space-y-4">
              <Label className="text-white text-lg">Custom Colors</Label>
              <ColorPicker
                label="Primary Color"
                value={formData.colorTheme?.primary || "#6366F1"}
                onChange={(value) => updateField("colorTheme", { 
                  ...formData.colorTheme,
                  primary: value 
                })}
              />
              <ColorPicker
                label="Secondary Color"
                value={formData.colorTheme?.secondary || "#8B5CF6"}
                onChange={(value) => updateField("colorTheme", {
                  ...formData.colorTheme,
                  secondary: value
                })}
              />
              <ColorPicker
                label="Background Color"
                value={formData.colorTheme?.background || "#000000"}
                onChange={(value) => updateField("colorTheme", {
                  ...formData.colorTheme,
                  background: value
                })}
              />
              <ColorPicker
                label="Text Color"
                value={formData.colorTheme?.text || "#FFFFFF"}
                onChange={(value) => updateField("colorTheme", {
                  ...formData.colorTheme,
                  text: value
                })}
              />
              <ColorPicker
                label="Hover Text Color"
                value={formData.colorTheme?.hoverText || "#F3F4F6"}
                onChange={(value) => updateField("colorTheme", {
                  ...formData.colorTheme,
                  hoverText: value
                })}
              />
              <ColorPicker
                label="Selected Text Color"
                value={formData.colorTheme?.selectedText || "#4F46E5"}
                onChange={(value) => updateField("colorTheme", {
                  ...formData.colorTheme,
                  selectedText: value
                })}
              />
              <ColorPicker
                label="Accent Color"
                value={formData.colorTheme?.accent || "#4F46E5"}
                onChange={(value) => updateField("colorTheme", {
                  ...formData.colorTheme,
                  accent: value
                })}
              />
            </div>
          </TabsContent>
        </Tabs>
        
        <div className="flex gap-4">
          <Button
            type="submit"
            className="w-full"
            disabled={isGenerating}
          >
            {isGenerating ? (
              <>Generating...</>
            ) : (
              <>Generate Sales System</>
            )}
          </Button>

          {!publicVersion && onSave && (
            <Button
              type="button"
              variant="outline"
              onClick={onSave}
              disabled={isGenerating}
            >
              Save
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}