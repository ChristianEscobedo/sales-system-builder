"use client";

import { useState, Dispatch, SetStateAction } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Wand2, Loader2 } from "lucide-react";
import type { AscensionEmailData } from "@/types/email";

interface AutoGenerateDialogProps {
  onGenerate: Dispatch<SetStateAction<AscensionEmailData>>;
}

type CallToActionType = "webinar" | "workshop" | "masterclass" | "call";

interface Brief {
  productName: string;
  mainBenefit: string;
  targetAudience: string;
  callToAction: CallToActionType;
  webinarTitle: string;
}

export function AutoGenerateDialog({ onGenerate }: AutoGenerateDialogProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [brief, setBrief] = useState<Brief>({
    productName: "",
    mainBenefit: "",
    targetAudience: "",
    callToAction: "webinar",
    webinarTitle: ""
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    // Generate a simple template
    const generatedData: AscensionEmailData = {
      ...brief,
      productPrice: "$97",
      painPoint: "",
      solution: "",
      webinarDate: "",
      webinarTime: "",
      highTicketOffer: "",
      highTicketPrice: "$997",
      bonusName: "VIP Implementation Program",
      bonusValue: 997,
      hiddenBonusName: "Fast Action Bonus",
      hiddenBonusValue: 497,
      targetAudience: "",
      mainBenefit: "",
      webinarTitle: "",
      emails: Array.from({ length: 14 }, (_, i) => ({
        day: i + 1,
        subject: "",
        content: "",
        body: "",
        type: "invitation" as const
      }))
    };

    onGenerate(generatedData);
    setIsOpen(false);
    setIsLoading(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700">
          <Wand2 className="mr-2 h-4 w-4" />
          Auto Generate
        </Button>
      </DialogTrigger>
      <DialogContent className="bg-[#0A0A0A] border-purple-500/20 text-white">
        <DialogHeader>
          <DialogTitle>Auto Generate High-Ticket Sequence</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div>
            <Label>Product Name</Label>
            <Input
              required
              value={brief.productName}
              onChange={(e) => setBrief(prev => ({ ...prev, productName: e.target.value }))}
              className="bg-white/10 border-purple-500/30"
              placeholder="e.g., Agency Scaling Blueprint"
            />
          </div>
          <div>
            <Label>Main Benefit</Label>
            <Input
              required
              value={brief.mainBenefit}
              onChange={(e) => setBrief(prev => ({ ...prev, mainBenefit: e.target.value }))}
              className="bg-white/10 border-purple-500/30"
              placeholder="e.g., Scale Your Agency to 7-Figures"
            />
          </div>
          <div>
            <Label>Target Audience</Label>
            <Input
              required
              value={brief.targetAudience}
              onChange={(e) => setBrief(prev => ({ ...prev, targetAudience: e.target.value }))}
              className="bg-white/10 border-purple-500/30"
              placeholder="e.g., Agency Owners"
            />
          </div>
          <div>
            <Label>Call to Action Type</Label>
            <Select
              value={brief.callToAction}
              onValueChange={(value: CallToActionType) => 
                setBrief(prev => ({ ...prev, callToAction: value }))
              }
            >
              <SelectTrigger className="bg-white/10 border-purple-500/30">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="webinar">Webinar</SelectItem>
                <SelectItem value="workshop">Workshop</SelectItem>
                <SelectItem value="masterclass">Masterclass</SelectItem>
                <SelectItem value="call">Strategy Call</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label>Title</Label>
            <Input
              required
              value={brief.webinarTitle}
              onChange={(e) => setBrief(prev => ({ ...prev, webinarTitle: e.target.value }))}
              className="bg-white/10 border-purple-500/30"
              placeholder="e.g., How to Scale Your Agency to 7-Figures in 90 Days"
            />
          </div>
          <Button 
            type="submit"
            disabled={isLoading}
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              'Generate Email Sequence'
            )}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}